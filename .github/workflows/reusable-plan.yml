name: Reusable Plan Workflow

on:
  workflow_call:
    inputs:
      AWS-ENV:
        required: true
        type: string
      REGION:
        required: true
        type: string
      STACK:
        required: true
        type: string
    secrets:
      TOOLS_ACCOUNT_ACCESS_KEY_ID:
        required: true
      TOOLS_ACCOUNT_SECRET_ACCESS_KEY:
        required: true

permissions:
  contents: read
  id-token: write
  pull-requests: write
  
jobs:
  # This workflow contains a single job called "plan"
  cdk-plan:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Sets up AWS profile.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TOOLS_ACCOUNT_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TOOLS_ACCOUNT_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.REGION }}
          role-duration-seconds: 1200
          role-session-name: GitActionDeploymentSession
          #role-to-assume: ${{ secrets.CROSS_ACCOUNT_ROLE }}
      # Installs CDK and other prerequisites
      - name: Prerequisite Installation
        run: |
          sudo npm install -g aws-cdk@2.33.0
          cdk --version
          aws s3 ls
          npm install
      - name: plan-${{ inputs.AWS-ENV }}
        id: plan
        run: |
          npm run build
          cdk diff ${{ inputs.STACK }}
      # Update Pull Request with details from plan, validate and init
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### ${{ inputs.ENV }} CICD Summary.
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # If plan fails
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
